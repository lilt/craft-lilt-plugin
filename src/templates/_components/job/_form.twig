{% import '_includes/forms' as forms %}

{% set isFormElementsReadOnly = not (constant('STATUS_NEW', element) is same as element.getStatus()) and not (constant('STATUS_DRAFT', element) is same as element.getStatus()) %}

<form method="post" id="create-job-form" class="{{ isFormElementsReadOnly ? 'submitted-job-preview' : '' }}"
      accept-charset="UTF-8" action="{{ formActionUrl }}">
    {{ csrfInput() }}

    {% if element.id is not same as null %}
        {{ forms.textField({
            name: 'jobId',
            id: 'jobId',
            value: element.id,
            class: 'hidden'
        }) }}
    {% endif %}

    {{ forms.textField({
        label: 'Job title <span class="required"/>'|t,
        placeholder: 'Translation job title',
        name: 'title',
        id: 'title',
        value: element.title ?? '',
        errors: model is defined and model ? model.getErrors('title'),
        maxlength: 255,
        errors: element.getErrors('title'),
        readonly: isFormElementsReadOnly,
        class: (isFormElementsReadOnly ? 'disabled no-opacity' : '')
    }) }}

    <hr/>

    <div id="entries-to-translate-field" class="field">
        <div class="heading">
            {{ forms.textField({
                label: 'Entries <span class="required"/>'|t,
                name: 'entries',
                id: 'create-job-selected-entries',
                class: 'create-job-selected-entries hidden',
                value: element.getElementIdsAsString ?? '[]',
                errors: model is defined and model ? model.getErrors('title'),
                maxlength: 255,
                errors: element.getErrors('elementIds'),
            }) }}
            {{ forms.textField({
                name: 'versions',
                id: 'create-job-selected-versions',
                class: 'create-job-selected-versions hidden',
                value: element.getVersionsAsString ?? '[]',
            }) }}
        </div>
        <div class="content-pane" id="entries-to-translate">
            <div class="main">
                <div class="elements {{ isFormElementsReadOnly ? 'disabled' : '' }}"></div>
            </div>

            <div id="toolbar-element-index" class="flex flex-nowrap"></div>
        </div>

        {% if isDraftJob or isNewJob %}
            <div class="flex">
                <div class="submit">
                    <button type="button" class="btn add icon dashed addAnEntry">{{ 'Add an entry'|t }}</button>
                </div>
                <div id="entries-remove-action" class="btn submit">
                    Remove
                </div>
            </div>
        {% endif %}
    </div>

    <hr/>


    {{ forms.selectField({
        label: 'Source site <span class="required"/>',
        options: availableSites,
        name: 'sourceSite',
        id: 'sourceSite',
        value: element.sourceSiteId ?? '',
        errors: element.getErrors('sourceSiteId'),
        readonly: isFormElementsReadOnly,
        class: (isFormElementsReadOnly ? 'disabled no-opacity' : '')
    }) }}

    <hr/>

    {# Copy of vendor/craftcms/cms/src/templates/settings/sites/index.html with some adjustments #}
    <div id="lilt-target-sites" class="field {{ isFormElementsReadOnly ? 'disabled no-opacity' : '' }}">
        <div class="heading">
            <label id="lilt-target-sites-table-container-label" for="lilt-target-sites-table-container">
                Target site(s)
                <span class="required"></span>
            </label>
        </div>
        {% if element is defined and element.getErrors('targetSiteIds') | length %}
            <div class="input ltr errors" style="margin-bottom: 5px">
                {% tag 'ul' with {
                    id: id ?? false,
                    class: 'errors',
                } %}
                    {% for error in element.getErrors('targetSiteIds') %}
                        <li>
                            {{ tag('span', {
                                class: 'visually-hidden',
                                text: 'Error:'|t('app'),
                            }) }}
                            {{ error|e|md(inlineOnly=true)|replace('/&amp;(\\w+);/', '&$1;')|raw }}
                        </li>
                    {% endfor %}
                {% endtag %}
            </div>
        {% endif %}
        <div id="lilt-target-sites-search" class="flex-grow texticon search icon clearable">
            <input id="search" type="text" class="text fullwidth {{isFormElementsReadOnly ? 'disabled no-opacity' : ''}}" autocomplete="off" placeholder="Search"
                   aria-label="Search" data-np-checked="1" {{isFormElementsReadOnly ? 'disabled="true"' : ''}}">
            <div class="clear" title="Clear" aria-label="Clear"></div>
        </div>
        <div id="lilt-target-sites-table-container">
            <table id="sites" class="data fullwidth">
                <thead>
                <th class="checkbox-cell selectallcontainer {{ isFormElementsReadOnly ? 'disabled no-opacity' : '' }}" role="checkbox" aria-checked="false" scope="col">
                    <div class="checkbox selectallcheckbox {{ isFormElementsReadOnly ? 'disabled no-opacity' : '' }}" title="Select" aria-label="Select"></div>
                </th>
                <th scope="col">{{ "Name"|t('app') }}</th>
                <th scope="col">{{ "Language"|t('app') }}</th>
                <th scope="col">{{ "Base URL"|t('app') }}</th>
                </thead>
                <tbody>
                {% for site in sites %}
                    <tr data-id="{{ site.id }}" data-uid="{{ site.uid }}" data-language="{{ site.language }}"
                        data-name="{{ site.name|t('site') }}">
                        <td>
                            {{ forms.checkbox({
                                name: 'targetSiteIds[]',
                                value: site.id,
                                checked: site.id in element.targetSiteIds,
                                readonly: isFormElementsReadOnly,
                                class: (isFormElementsReadOnly ? 'disabled no-opacity' : '')
                            }) }}
                        </td>
                        <th scope="row" data-title="{{ 'Name'|t('app') }}">
                            <a href="{{ url('settings/sites/' ~ site.id) }}" target="_blank">
                                <span class="status {{ site.enabled ? 'enabled' : 'disabled' }}"></span>{{ site.name|t('site') }}
                            </a>
                        </th>
                        <td data-title="{{ 'Language'|t('app') }}"><code>{{ site.language }}</code></td>
                        <td data-title="{{ 'Base URL'|t('app') }}"><code>{{ site.baseUrl }}</code></td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <hr/>

    <a class="fieldtoggle collapsed" data-target="types-craft-fields-Assets-advanced">Advanced</a>
    <div id="types-craft-fields-Assets-advanced" class="hidden" style="overflow: hidden; height: 0;">

        {{ forms.selectField({
            label: 'Translation(s) Workflow <span class="required"/>',
            options: translationWorkflowsOptions,
            showAllOption: true,
            name: 'translationWorkflow',
            id: 'translationWorkflow',
            value: element.translationWorkflow ?? defaultTranslationWorkflow,
            errors: element.getErrors('liltTranslationWorkflow'),
            readonly: isFormElementsReadOnly,
            class: (isFormElementsReadOnly ? 'disabled no-opacity' : '')
        }) }}

    </div>

</form>